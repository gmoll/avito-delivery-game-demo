(function() {
  var BL;

  window.BL_Avito || (window.BL_Avito = {});

  BL = BL_Avito;

  BL.development = true;

  BL.scenes = {};

  BL.log = BL_Avito.development ? console.log : function() {};

}).call(this);

(function() {
  var BL, PI, direction, i, len, ref;

  BL = BL_Avito;

  BL.ROAD_LENGTH = 3.0;

  BL.OFFSET_X = 1.5;

  BL.COLORS = {
    'source': '#a39e8e',
    'red': '#ff6162',
    'green': '#99d02f',
    'violet': '#a168f7',
    'blue': '#00aaff'
  };

  BL.DIRECTIONS = {
    n: {
      x: 0,
      y: -1,
      r: 0,
      opposite: 's'
    },
    s: {
      x: 0,
      y: 1,
      r: 180,
      opposite: 'n'
    },
    w: {
      x: -1,
      y: 0,
      r: -90,
      opposite: 'e'
    },
    e: {
      x: 1,
      y: 0,
      r: 90,
      opposite: 'w'
    }
  };

  PI = Math.PI;

  BL.ANGLES = {
    n: {
      w: [0, -PI / 2],
      e: [-PI, -PI / 2]
    },
    s: {
      w: [0, PI / 2],
      e: [PI, PI / 2]
    },
    w: {
      n: [-PI / 2, 0],
      s: [PI / 2, 0]
    },
    e: {
      n: [-PI / 2, -PI],
      s: [PI / 2, PI]
    }
  };

  BL.OBJECT_SIZES = {
    'town': {
      ox: 1.0,
      oy: 1.0,
      w: 2.0,
      h: 2.0
    },
    'cross': {
      ox: 1.0,
      oy: 1.0,
      w: 2.0,
      h: 2.0
    },
    'roadnode-se': {
      ox: 0.5,
      oy: 0.5,
      w: 1.5,
      h: 1.5
    },
    'roadnode-ne': {
      ox: 0.5,
      oy: 1.0,
      w: 1.5,
      h: 1.5
    },
    'roadnode-sw': {
      ox: 1.0,
      oy: 0.5,
      w: 1.5,
      h: 1.5
    },
    'roadnode-nw': {
      ox: 1.0,
      oy: 1.0,
      w: 1.5,
      h: 1.5
    },
    'roadnode-ns': {
      ox: 0.5,
      oy: 1.0,
      w: 1.0,
      h: 2.0
    },
    'roadnode-we': {
      ox: 1.0,
      oy: 0.5,
      w: 2.0,
      h: 1.0
    },
    'road-s': {
      ox: 0.5,
      oy: BL.ROAD_LENGTH / 2,
      w: 1.0,
      h: BL.ROAD_LENGTH
    },
    'road-e': {
      ox: BL.ROAD_LENGTH / 2,
      oy: 0.5,
      w: BL.ROAD_LENGTH,
      h: 1.0
    }
  };

  ref = ['se', 'ne', 'sw', 'nw', 'ns', 'we'];
  for (i = 0, len = ref.length; i < len; i++) {
    direction = ref[i];
    BL.OBJECT_SIZES["roadshadow-" + direction] = BL.OBJECT_SIZES["roadnode-" + direction];
  }

}).call(this);

(function() {
  var BL, direction, i, index, j, k, len, len1, len2, level, line, obj, ref, ref1, ref2, x, y;

  BL = BL_Avito;

  BL.levelsCount = 7;

  BL.levels = {
    1: {
      width: 3,
      height: 4,
      cargo: 5,
      speed: 2.0,
      back: 'back-1.png',
      bgOffsetX: 0,
      bgOffsetY: 0,
      objects: [
        [
          {
            type: 'town',
            links: 's',
            name: "Хабаровск",
            color: 'red'
          }, void 0, {
            type: 'town',
            links: 's',
            name: "Биробиджан",
            color: 'violet'
          }
        ], [
          {
            type: 'road',
            links: 'ne'
          }, {
            type: 'cross',
            links: 'swe',
            join: ['sw', 'se']
          }, {
            type: 'road',
            links: 'nw'
          }
        ], [
          void 0, {
            type: 'road',
            links: 'ns'
          }, void 0
        ], [
          void 0, {
            type: 'town',
            links: 'n',
            name: "Владивосток",
            color: 'source',
            destinations: ['red', 'violet']
          }, void 0
        ]
      ]
    },
    2: {
      width: 3,
      height: 4,
      cargo: 5,
      speed: 3,
      back: 'back-2.png',
      bgOffsetX: 0,
      bgOffsetY: 0,
      objects: [
        [
          {
            type: 'town',
            links: 's',
            name: "Брянск",
            color: 'red'
          }, {
            type: 'town',
            links: 's',
            name: "Калуга",
            color: 'violet'
          }, {
            type: 'town',
            links: 's',
            name: "Орел",
            color: 'blue'
          }
        ], [
          {
            type: 'road',
            links: 'ns'
          }, {
            type: 'cross',
            links: 'nse',
            join: ['ns', 'se']
          }, {
            type: 'road',
            links: 'nw'
          }
        ], [
          {
            type: 'road',
            links: 'ne'
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['ns', 'sw']
          }, void 0
        ], [
          void 0, {
            type: 'town',
            links: 'n',
            name: "Москва",
            color: 'source',
            destinations: ['red', 'blue', 'violet']
          }, void 0
        ]
      ]
    },
    3: {
      width: 3,
      height: 4,
      cargo: 5,
      speed: 1.5,
      back: 'back-3.png',
      bgOffsetX: 0,
      bgOffsetY: 0,
      objects: [
        [
          {
            type: 'town',
            links: 's',
            name: "Грозный",
            color: 'source',
            destinations: ['blue', 'violet']
          }, void 0, {
            type: 'town',
            links: 's',
            name: "Пятигорск",
            color: 'blue'
          }
        ], [
          {
            type: 'road',
            links: 'ns'
          }, {
            type: 'road',
            links: 'se'
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['nw', 'sw']
          }
        ], [
          {
            type: 'cross',
            links: 'nse',
            join: ['se', 'ne']
          }, {
            type: 'road',
            links: 'nw'
          }, {
            type: 'road',
            links: 'ns'
          }
        ], [
          {
            type: 'town',
            links: 'n',
            name: "Махачкала",
            color: 'source',
            destinations: ['blue', 'violet']
          }, void 0, {
            type: 'town',
            links: 'n',
            name: "Кисловодск",
            color: 'violet'
          }
        ]
      ]
    },
    4: {
      width: 3,
      height: 4,
      cargo: 5,
      speed: 4,
      back: 'back-4.png',
      bgOffsetX: 0,
      bgOffsetY: 0,
      objects: [
        [
          void 0, {
            type: 'town',
            links: 's',
            name: "Великий&nbsp;Новгород",
            color: 'red'
          }, {
            type: 'town',
            links: 's',
            name: "Санкт&#8209;Петербург",
            color: 'blue'
          }
        ], [
          {
            type: 'town',
            links: 's',
            name: "Архангельск",
            color: 'green'
          }, {
            type: 'road',
            links: 'ne'
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['sw', 'ns']
          }
        ], [
          {
            type: 'cross',
            links: 'nse',
            join: ['ne', 'se']
          }, {
            type: 'road',
            links: 'we'
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['sw', 'ns']
          }
        ], [
          {
            type: 'town',
            links: 'n',
            name: "Териберка",
            color: 'violet'
          }, void 0, {
            type: 'town',
            links: 'n',
            name: "Мурманск",
            color: 'source',
            destinations: ['red', 'green', 'blue', 'violet']
          }
        ]
      ]
    },
    5: {
      width: 4,
      height: 5,
      cargo: 5,
      speed: 6,
      back: 'back-5.png',
      bgOffsetX: 0,
      bgOffsetY: 30,
      objects: [
        [
          {
            type: 'town',
            links: 's',
            name: "Новороссийск",
            color: 'red'
          }, void 0, {
            type: 'town',
            links: 's',
            name: "Сочи",
            color: 'violet'
          }, void 0
        ], [
          {
            type: 'road',
            links: 'ne'
          }, {
            type: 'cross',
            links: 'swe',
            join: ['sw', 'se']
          }, {
            type: 'road',
            links: 'nw'
          }, {
            type: 'town',
            links: 's',
            name: "Ростов&#8209;на&#8209;Дону",
            color: 'blue'
          }
        ], [
          {
            type: 'road',
            links: 'se'
          }, {
            type: 'cross',
            links: 'nwe',
            join: ['nw', 'ne']
          }, {
            type: 'road',
            links: 'we'
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['sw', 'ns']
          }
        ], [
          {
            type: 'road',
            links: 'ns'
          }, void 0, void 0, {
            type: 'road',
            links: 'ns'
          }
        ], [
          {
            type: 'town',
            links: 'n',
            name: "Краснодар",
            color: 'source',
            destinations: ['red', 'violet']
          }, void 0, void 0, {
            type: 'town',
            links: 'n',
            name: "Ставрополь",
            color: 'source',
            destinations: ['red', 'blue', 'violet']
          }
        ]
      ]
    },
    6: {
      width: 4,
      height: 5,
      cargo: 5,
      speed: 5,
      back: 'back-6.png',
      bgOffsetX: 2,
      bgOffsetY: 30,
      objects: [
        [
          {
            type: 'town',
            links: 's',
            name: "Красноярск",
            color: 'red'
          }, void 0, {
            type: 'town',
            links: 's',
            name: "Братск",
            color: 'blue'
          }, {
            type: 'town',
            links: 's',
            name: "Нижнеангарск",
            color: 'source',
            destinations: ['red', 'green', 'blue', 'violet']
          }
        ], [
          {
            type: 'cross',
            links: 'nse',
            join: ['ns', 'se']
          }, {
            type: 'road',
            links: 'we'
          }, {
            type: 'cross',
            links: 'nwe',
            join: ['nw', 'we']
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['ns', 'sw']
          }
        ], [
          {
            type: 'road',
            links: 'ns'
          }, void 0, void 0, {
            type: 'road',
            links: 'ns'
          }
        ], [
          {
            type: 'cross',
            links: 'nse',
            join: ['ns', 'ne']
          }, {
            type: 'cross',
            links: 'swe',
            join: ['se', 'we']
          }, {
            type: 'road',
            links: 'we'
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['ns', 'nw']
          }
        ], [
          {
            type: 'town',
            links: 'n',
            name: "Иркутск",
            color: 'source',
            destinations: ['red', 'green', 'blue', 'violet']
          }, {
            type: 'town',
            links: 'n',
            name: "Улан&#8209;Удэ",
            color: 'green'
          }, void 0, {
            type: 'town',
            links: 'n',
            name: "Чита",
            color: 'violet'
          }
        ]
      ]
    },
    7: {
      width: 4,
      height: 5,
      cargo: 5,
      speed: 4,
      back: 'back-7.png',
      bgOffsetX: 3,
      bgOffsetY: 30,
      objects: [
        [
          void 0, {
            type: 'town',
            links: 's',
            color: 'blue',
            name: "Екатеринбург"
          }, void 0, void 0
        ], [
          {
            type: 'town',
            links: 's',
            color: 'red',
            name: "Нижний&nbsp;Тагил"
          }, {
            type: 'road',
            links: 'ns'
          }, {
            type: 'town',
            links: 's',
            color: 'green',
            name: "Тюмень"
          }, {
            type: 'town',
            links: 's',
            color: 'violet',
            name: "Курган"
          }
        ], [
          {
            type: 'road',
            links: 'ne'
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['ns', 'sw']
          }, {
            type: 'road',
            links: 'ne'
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['sw', 'ns']
          }
        ], [
          void 0, {
            type: 'cross',
            links: 'nse',
            join: ['ns', 'ne']
          }, {
            type: 'cross',
            links: 'swe',
            join: ['se', 'sw']
          }, {
            type: 'cross',
            links: 'nsw',
            join: ['ns', 'nw']
          }
        ], [
          void 0, {
            type: 'town',
            links: 'n',
            color: 'source',
            name: "Уфа",
            destinations: ['red', 'blue']
          }, {
            type: 'town',
            links: 'n',
            color: 'source',
            name: "Магнитогорск",
            destinations: ['red', 'green', 'blue', 'violet']
          }, {
            type: 'town',
            links: 'n',
            color: 'source',
            name: "Челябинск",
            destinations: ['green', 'violet']
          }
        ]
      ]
    }
  };

  ref = BL.levels;
  for (index in ref) {
    level = ref[index];
    ref1 = level.objects;
    for (y = i = 0, len = ref1.length; i < len; y = ++i) {
      line = ref1[y];
      for (x = j = 0, len1 = line.length; j < len1; x = ++j) {
        obj = line[x];
        if (obj) {
          obj.x = x;
          obj.y = y;
          obj.next = {};
          ref2 = obj.links;
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            direction = ref2[k];
            obj.next[direction] = level.objects[y + BL.DIRECTIONS[direction].y][x + BL.DIRECTIONS[direction].x];
          }
        }
      }
    }
  }

}).call(this);

(function() {
  var BL;

  BL = BL_Avito;

  BL.distance = function(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
  };

  BL.gridToInternal = function(coord) {
    return coord * (BL.ROAD_LENGTH + 2) + 1;
  };

  BL.Level = (function() {
    function Level(game, levelNo, levelData) {
      var direction, i, j, k, len, len1, len2, line, obj, ref, ref1, town, x, y;
      this.game = game;
      this.levelNo = levelNo;
      this.levelData = levelData;
      this.unit = 80;
      this.generated = 0;
      this.delivered = 0;
      this.scoreIndicator = Crafty.e("2D, DOM, Text").attr({
        y: 0
      }).textFont({
        size: '24px'
      }).text("Очки:&nbsp;" + this.game.score);
      this.livesIndicator = Crafty.e("2D, DOM, Text").attr({
        y: 48
      }).textFont({
        size: '24px'
      }).text("Жизни:&nbsp;" + this.game.lives);
      this.statusIndicator = Crafty.e("2D, DOM, Text").attr({
        y: 96
      }).textFont({
        size: '24px'
      }).text("");
      this.elements = [];
      Crafty.e("2D, DOM, Image").image("images/" + this.levelData.back).attr({
        x: this.levelData.bgOffsetX || 0,
        y: this.levelData.bgOffsetY || 0,
        z: -2
      });
      ref = this.levelData.objects;
      for (y = i = 0, len = ref.length; i < len; y = ++i) {
        line = ref[y];
        for (x = j = 0, len1 = line.length; j < len1; x = ++j) {
          obj = line[x];
          if (obj) {
            ref1 = obj.links;
            for (k = 0, len2 = ref1.length; k < len2; k++) {
              direction = ref1[k];
              switch (direction) {
                case 's':
                  this.addVerticalRoad(x, y);
                  break;
                case 'e':
                  this.addHorizontalRoad(x, y);
              }
            }
            switch (obj.type) {
              case 'road':
                this.addNode(x, y, obj);
                break;
              case 'cross':
                this.addCross(x, y, obj);
                break;
              case 'town':
                town = this.addTown(x, y, obj);
                if (town.obj.destinations) {
                  town.generateTruckDefer();
                }
            }
          }
        }
      }
      this.adjustSize();
      window.addEventListener('resize', (function(_this) {
        return function() {
          return _this.adjustSize();
        };
      })(this));
    }

    Level.prototype.onTruckCreate = function() {
      this.generated += 1;
      return BL.log('generated', this.generated);
    };

    Level.prototype.onTruckDestroy = function(truck, cargoAccepted) {
      var continued;
      this.delivered += 1;
      BL.log('delivered', this.delivered);
      if (this.delivered >= this.levelData.cargo) {
        BL.log('Done');
        this.game.nextLevel();
      }
      if (cargoAccepted) {
        continued = this.game.onCargoDelivered();
      } else {
        continued = this.game.onCargoLost();
      }
      if (continued && this.generated < this.levelData.cargo) {
        truck.from.generateTruck();
      }
      this.scoreIndicator.text("Очки:&nbsp;" + this.game.score);
      return this.livesIndicator.text("Жизни:&nbsp;" + this.game.lives);
    };

    Level.prototype.adjustSize = function() {
      var internalH, internalW, scale, scaleH, scaleW, viewportH, viewportW;
      internalW = ((this.levelData.width - 1) * (BL.ROAD_LENGTH + 2) + 1 + BL.OFFSET_X) * this.unit + 240;
      internalH = ((this.levelData.height - 1) * (BL.ROAD_LENGTH + 2) + 1) * this.unit + this.levelData.bgOffsetY + 240;
      viewportW = BL.$root.width();
      viewportH = BL.$root.height();
      scaleW = viewportW / internalW;
      scaleH = viewportH / internalH;
      scale = Math.min(scaleW, scaleH);
      Crafty.viewport.scale(scale);
      Crafty.viewport.x = (viewportW - internalW * scale) / 2 / scale + 60 * scale;
      return Crafty.viewport.y = (viewportH - internalH * scale) / 2 / scale + 60 * scale;
    };

    Level.prototype.addVisualElement = function(x, y, part, size, node) {
      var components, elem;
      components = "2D, DOM, Image";
      if (node) {
        components += ", Driveable, Part_" + x + "_" + y;
      }
      elem = Crafty.e(components).image("images/part-" + part + ".svg").origin(size.ox * this.unit, size.oy * this.unit).attr({
        w: size.w * this.unit,
        h: size.h * this.unit
      });
      this.elements.push(elem);
      return elem;
    };

    Level.prototype.addTown = function(x, y, obj) {
      return Crafty.e("Town").setupTown(this, x, y, obj, this.unit);
    };

    Level.prototype.addCross = function(x, y, obj) {
      return Crafty.e("Cross, Part_" + x + "_" + y).setupCross(x, y, obj, this.unit);
    };

    Level.prototype.addNode = function(x, y, obj) {
      var elem, entry, exit, i, len, pair, pairs, part, results, size;
      part = "roadnode-" + obj.links;
      size = BL.OBJECT_SIZES[part];
      elem = this.addVisualElement(x, y, part, size, true).attr({
        x: this.unit * (x * (BL.ROAD_LENGTH + 2) - size.ox + 1 + BL.OFFSET_X),
        y: this.unit * (y * (BL.ROAD_LENGTH + 2) - size.oy + 1)
      });
      pairs = [[obj.links[0], obj.links[1]], [obj.links[1], obj.links[0]]];
      results = [];
      for (i = 0, len = pairs.length; i < len; i++) {
        pair = pairs[i];
        entry = pair[0];
        exit = pair[1];
        results.push(elem.setupWayForNode(x, y, entry, exit, obj));
      }
      return results;
    };

    Level.prototype.addVerticalRoad = function(x, y) {
      var elem, part, size;
      part = "road-s";
      size = BL.OBJECT_SIZES[part];
      Crafty.e('2D, DOM, Color').color('#cac2a8').attr({
        x: this.unit * (x * (BL.ROAD_LENGTH + 2) - size.ox + 1 + BL.OFFSET_X),
        y: this.unit * (y * (BL.ROAD_LENGTH + 2) + size.oy + 0.5) - 2,
        w: this.unit,
        h: BL.ROAD_LENGTH * this.unit + 4
      });
      return elem = this.addVisualElement(x, y, part, size).attr({
        x: this.unit * (x * (BL.ROAD_LENGTH + 2) - size.ox + 1 + BL.OFFSET_X),
        y: this.unit * (y * (BL.ROAD_LENGTH + 2) + size.oy + 0.5)
      });
    };

    Level.prototype.addHorizontalRoad = function(x, y) {
      var elem, part, size;
      part = "road-e";
      size = BL.OBJECT_SIZES[part];
      Crafty.e('2D, DOM, Color').color('#cac2a8').attr({
        x: this.unit * (x * (BL.ROAD_LENGTH + 2) + size.ox + 0.5 + BL.OFFSET_X) - 2,
        y: this.unit * (y * (BL.ROAD_LENGTH + 2) - size.oy + 1),
        w: BL.ROAD_LENGTH * this.unit + 4,
        h: this.unit
      });
      return elem = this.addVisualElement(x, y, part, size).attr({
        x: this.unit * (x * (BL.ROAD_LENGTH + 2) + size.ox + 0.5 + BL.OFFSET_X),
        y: this.unit * (y * (BL.ROAD_LENGTH + 2) - size.oy + 1)
      });
    };

    return Level;

  })();

}).call(this);

(function() {
  var BL;

  BL = BL_Avito;

  Crafty.c('Driveable', {
    init: function() {
      return this.ways = {};
    },
    setupWay: function(side, tasks) {
      return this.ways[side] = tasks;
    },
    way: function(side) {
      return this.ways[side];
    },
    setupWayForNode: function(x, y, entrySide, exitSide, obj) {
      var tasks;
      tasks = [
        {
          action: "move",
          trajectory: "straight",
          start: {
            x: BL.gridToInternal(x) + BL.DIRECTIONS[exitSide].x,
            y: BL.gridToInternal(y) + BL.DIRECTIONS[exitSide].y,
            r: BL.DIRECTIONS[exitSide].r
          },
          target: {
            x: BL.gridToInternal(x + BL.DIRECTIONS[exitSide].x) - BL.DIRECTIONS[exitSide].x,
            y: BL.gridToInternal(y + BL.DIRECTIONS[exitSide].y) - BL.DIRECTIONS[exitSide].y,
            r: BL.DIRECTIONS[exitSide].r
          }
        }, {
          action: "request",
          object: obj.next[exitSide],
          side: BL.DIRECTIONS[exitSide].opposite
        }
      ];
      if (entrySide === BL.DIRECTIONS[exitSide].opposite) {
        tasks.unshift({
          action: "move",
          trajectory: "straight",
          start: {
            x: BL.gridToInternal(x) + BL.DIRECTIONS[entrySide].x,
            y: BL.gridToInternal(y) + BL.DIRECTIONS[entrySide].y,
            r: BL.DIRECTIONS[exitSide].r
          },
          target: {
            x: BL.gridToInternal(x) + BL.DIRECTIONS[exitSide].x,
            y: BL.gridToInternal(y) + BL.DIRECTIONS[exitSide].y,
            r: BL.DIRECTIONS[exitSide].r
          }
        });
      } else {
        tasks.unshift({
          action: "move",
          trajectory: "curve",
          start: {
            x: BL.gridToInternal(x) + BL.DIRECTIONS[entrySide].x,
            y: BL.gridToInternal(y) + BL.DIRECTIONS[entrySide].y,
            r: BL.DIRECTIONS[BL.DIRECTIONS[entrySide].opposite].r,
            a: BL.ANGLES[entrySide][exitSide][0]
          },
          target: {
            x: BL.gridToInternal(x) + BL.DIRECTIONS[exitSide].x + BL.DIRECTIONS[entrySide].x,
            y: BL.gridToInternal(y) + BL.DIRECTIONS[exitSide].y + BL.DIRECTIONS[entrySide].y,
            r: BL.DIRECTIONS[exitSide].r,
            a: BL.ANGLES[entrySide][exitSide][1]
          }
        });
      }
      return this.setupWay(entrySide, tasks);
    }
  });

}).call(this);

(function() {
  var BL;

  BL = BL_Avito;

  Crafty.c('Town', {
    required: "2D, DOM, Driveable",
    setupTown: function(level, x, y, obj, unit) {
      var direction, downClass, element, i, len, part, ref, size;
      this.obj = obj;
      this.ix = x;
      this.iy = y;
      this.unit = unit;
      this.level = level;
      this.z = 20;
      this.addComponent("Part_" + x + "_" + y);
      downClass = obj.links === 's' ? '_down' : '';
      element = BL.$("<div> <span class='BL-avito_town-label " + downClass + "' style='background: " + BL.COLORS[obj.color] + "'> " + obj.name + " </span> </div>")[0];
      this.DOM(element);
      part = 'town';
      size = BL.OBJECT_SIZES[part];
      this.origin(size.ox * this.unit, size.oy * this.unit);
      this.attr({
        w: size.w * this.unit,
        h: size.h * this.unit,
        x: this.unit * (x * (BL.ROAD_LENGTH + 2) - size.ox + 1 + BL.OFFSET_X),
        y: this.unit * (y * (BL.ROAD_LENGTH + 2) - size.oy + 1)
      });
      ref = obj.links;
      for (i = 0, len = ref.length; i < len; i++) {
        direction = ref[i];
        this.setupWay(direction, [
          {
            action: 'accept',
            color: obj.color
          }
        ]);
      }
      return this;
    },
    generateTruckDefer: function() {
      return setTimeout((function(_this) {
        return function() {
          return _this.generateTruck();
        };
      })(this), 2000);
    },
    generateTruck: function() {
      var color, direction;
      this.level.onTruckCreate();
      direction = this.obj.links[Math.trunc(Math.random() * this.obj.links.length)];
      color = this.obj.destinations ? this.obj.destinations[Math.trunc(Math.random() * this.obj.destinations.length)] : 'source';
      Crafty.e('Truck').unit(this.unit).setupTask([
        {
          action: "setup",
          color: color,
          speed: this.level.levelData.speed + Math.random() * 0.2 - 0.1,
          from: this,
          level: this.level
        }, {
          action: "move",
          trajectory: "straight",
          start: {
            x: BL.gridToInternal(this.ix) + BL.DIRECTIONS[direction].x,
            y: BL.gridToInternal(this.iy) + BL.DIRECTIONS[direction].y,
            r: BL.DIRECTIONS[direction].r
          },
          target: {
            x: BL.gridToInternal(this.ix + BL.DIRECTIONS[direction].x) - BL.DIRECTIONS[direction].x,
            y: BL.gridToInternal(this.iy + BL.DIRECTIONS[direction].y) - BL.DIRECTIONS[direction].y,
            r: BL.DIRECTIONS[direction].r
          }
        }, {
          action: "request",
          object: this.obj.next[direction],
          side: BL.DIRECTIONS[direction].opposite
        }
      ]);
      return this;
    }
  });

}).call(this);

(function() {
  var BL;

  BL = BL_Avito;

  Crafty.c('Cross', {
    required: '2D, DOM, Driveable, Mouse',
    setupCross: function(x, y, obj, unit) {
      var direction, elem, i, j, len, len1, part, ref, ref1, size;
      this.obj = obj;
      this.ix = x;
      this.iy = y;
      this.unit = unit;
      size = BL.OBJECT_SIZES['cross'];
      this.attr({
        w: size.w * this.unit,
        h: size.h * this.unit,
        x: this.unit * (x * (BL.ROAD_LENGTH + 2) - size.ox + 1 + BL.OFFSET_X),
        y: this.unit * (y * (BL.ROAD_LENGTH + 2) - size.oy + 1)
      });
      ref = obj.join;
      for (i = 0, len = ref.length; i < len; i++) {
        direction = ref[i];
        part = "roadshadow-" + direction;
        size = BL.OBJECT_SIZES[part];
        elem = Crafty.e("2D, DOM, Image").image("images/part-" + part + ".svg").origin(size.ox * unit, size.oy * unit).attr({
          z: -1,
          w: size.w * unit,
          h: size.h * unit,
          x: unit * (x * (BL.ROAD_LENGTH + 2) - size.ox + 1 + BL.OFFSET_X),
          y: unit * (y * (BL.ROAD_LENGTH + 2) - size.oy + 1)
        });
      }
      this.roads = {};
      ref1 = obj.join;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        direction = ref1[j];
        part = "roadnode-" + direction;
        size = BL.OBJECT_SIZES[part];
        this.roads[direction] = Crafty.e("2D, DOM, Image, Tween").image("images/part-" + part + ".svg").origin(size.ox * unit, size.oy * unit).attr({
          w: size.w * this.unit,
          h: size.h * this.unit,
          x: unit * (x * (BL.ROAD_LENGTH + 2) - size.ox + 1 + BL.OFFSET_X),
          y: unit * (y * (BL.ROAD_LENGTH + 2) - size.oy + 1)
        });
        this.roads[direction].alpha = 0.0;
      }
      Crafty.e("2D, DOM").css({
        "border": "10px solid #b7af99",
        "border-radius": "50%"
      }).attr({
        x: unit * (x * (BL.ROAD_LENGTH + 2) + BL.OFFSET_X) - 10,
        y: unit * (y * (BL.ROAD_LENGTH + 2)) - 10,
        w: unit * 2,
        h: unit * 2
      });
      this.switchDirection();
      this.bind('Click', (function(_this) {
        return function() {
          return _this.switchDirection();
        };
      })(this));
      return this;
    },
    switchDirection: function() {
      if (!(this.directionIndex != null) || (this.directionIndex >= this.obj.join.length - 1)) {
        this.directionIndex = 0;
      } else {
        this.directionIndex += 1;
      }
      this.direction = this.obj.join[this.directionIndex];
      this.setupRoad();
      return this;
    },
    setupCrossWay: function(direction, isJoin) {
      var entry, exit, i, len, pair, pairs, results;
      pairs = [[direction[0], direction[1]], [direction[1], direction[0]]];
      results = [];
      for (i = 0, len = pairs.length; i < len; i++) {
        pair = pairs[i];
        entry = pair[0];
        exit = pair[1];
        if (isJoin) {
          results.push(this.setupWayForNode(this.ix, this.iy, entry, exit, this.obj));
        } else {
          results.push(this.setupWay(entry, [
            {
              action: "destroy"
            }
          ]));
        }
      }
      return results;
    },
    setupRoad: function() {
      var direction, i, len, ref, ref1;
      if ((ref = this.currentRoad) != null) {
        ref.tween({
          alpha: 0.0
        }, 100);
      }
      ref1 = this.obj.join;
      for (i = 0, len = ref1.length; i < len; i++) {
        direction = ref1[i];
        this.setupCrossWay(direction, false);
      }
      this.currentRoad = this.roads[this.direction];
      this.currentRoad.alpha = 1.0;
      this.setupCrossWay(this.direction, true);
      return this;
    }
  });

}).call(this);

(function() {
  var BL;

  BL = BL_Avito;

  Crafty.c('Truck', {
    required: '2D, DOM, Image, Tween',
    init: function() {
      this.z = 10;
      this.w = 63;
      this.h = 153;
      this.alpha = 0;
      this.origin(this.w / 2, this.h / 2);
      this.tasks = [];
      this.speed = 0.0;
      return this.bind('UpdateFrame', (function(_this) {
        return function(eventData) {
          return _this.moveTruck(eventData.dt / 1000);
        };
      })(this));
    },
    unit: function(unit) {
      this.unit = unit;
      return this;
    },
    setupTask: function(task) {
      this.tasks = this.tasks.concat(task);
      this.nextTask();
      return this;
    },
    nextTask: function() {
      var elem, obj;
      this.currentTask = this.tasks.shift();
      if (!this.currentTask) {
        console.error('Truck tasks are empty');
        return this;
      }
      switch (this.currentTask.action) {
        case "setup":
          if (this.currentTask.color) {
            this.cargoColor = this.currentTask.color;
            this.image("images/truck-" + this.cargoColor + ".svg");
          }
          if (this.currentTask.speed) {
            this.targetSpeed = this.currentTask.speed;
            this.speed = 0.5;
          }
          if (this.currentTask.from) {
            this.from = this.currentTask.from;
          }
          if (this.currentTask.level) {
            this.level = this.currentTask.level;
          }
          this.tween({
            alpha: 1.0
          }, 200);
          this.nextTask();
          break;
        case "move":
          this.setupPosition(this.currentTask.start.x, this.currentTask.start.y, this.currentTask.start.direction);
          if (this.currentTask.trajectory === 'curve') {
            this.angle = this.currentTask.start.a;
          }
          break;
        case "request":
          obj = this.currentTask.object;
          elem = Crafty("Part_" + obj.x + "_" + obj.y).get(0);
          if (elem) {
            this.setupTask(elem.way(this.currentTask.side));
          }
          break;
        case "destroy":
          this.level.onTruckDestroy(this, false);
          this.destroyTruck();
          break;
        case "accept":
          if (this.cargoColor === this.currentTask.color) {
            this.level.onTruckDestroy(this, true);
          } else {
            this.level.onTruckDestroy(this, false);
          }
          this.destroyTruck();
      }
      return this;
    },
    destroyTruck: function(forbidGeneration) {
      this.tween({
        alpha: 0
      }, 500);
      this.currentTask = null;
      return setTimeout((function(_this) {
        return function() {
          return _this.destroy();
        };
      })(this), 500);
    },
    setupPosition: function(x, y, r) {
      this.ix = x;
      this.iy = y;
      this.x = this.unit * (x + BL.OFFSET_X) - this.w / 2;
      this.y = this.unit * y - this.h / 2;
      if (r != null) {
        return this.rotation = r;
      }
    },
    moveTruck: function(dt) {
      var completion, movedDistance, newX, newY, overallDistance, rotation, start, target, targetR, timeRest;
      if (!this.currentTask) {
        return this;
      }
      if (this.currentTask.action !== "move") {
        console.error('Unhandled task:', this.currentTask);
        this.nextTask();
        return this;
      }
      if (this.speed < this.targetSpeed) {
        this.speed += 5 * dt;
      } else {
        this.speed = this.targetSpeed;
      }
      movedDistance = dt * this.speed;
      if (movedDistance === 0.0) {
        console.error('Zero truck speed');
        return this;
      }
      start = this.currentTask.start;
      target = this.currentTask.target;
      targetR = target.r;
      if (this.rotation - targetR > 90) {
        targetR = targetR + 360;
      }
      if (this.rotation - targetR < -90) {
        targetR = targetR - 360;
      }
      switch (this.currentTask.trajectory) {
        case 'straight':
          BL.distanceToTarget = BL.distance(target.x, target.y, this.ix, this.iy);
          overallDistance = BL.distance(target.x, target.y, start.x, start.y);
          break;
        case 'curve':
          BL.distanceToTarget = Math.abs(this.angle - target.a);
          overallDistance = Math.PI / 2;
      }
      completion = (overallDistance - BL.distanceToTarget) / overallDistance;
      rotation = start.r + (targetR - start.r) * completion;
      if (movedDistance >= BL.distanceToTarget) {
        this.nextTask();
        if (this.currentTask && this.currentTask.action === 'move' && this.speed >= 0.0) {
          timeRest = ((movedDistance - BL.distanceToTarget) / movedDistance) * dt;
          this.moveTruck(timeRest);
        }
      } else {
        switch (this.currentTask.trajectory) {
          case 'straight':
            newX = this.ix + (target.x - this.ix) / BL.distanceToTarget * movedDistance;
            newY = this.iy + (target.y - this.iy) / BL.distanceToTarget * movedDistance;
            break;
          case 'curve':
            this.angle = this.angle + (target.a - this.angle) / BL.distanceToTarget * movedDistance;
            newX = target.x + Math.cos(this.angle);
            newY = target.y - Math.sin(this.angle);
        }
        this.setupPosition(newX, newY, rotation);
      }
      return this;
    }
  });

}).call(this);

(function() {
  var BL;

  BL = BL_Avito;

  BL.$root = BL.$('#game_avito');

  BL.$gameScreen = BL.$root.append(BL.$('<div id="BL-avito_game-screen"></div>'));

  Crafty.init(2000, 2000, 'BL-avito_game-screen');

  BL.AvitoGame = (function() {
    function AvitoGame() {
      this.reset();
    }

    AvitoGame.prototype.reset = function() {
      Crafty.init(2000, 2000, 'BL-avito_game-screen');
      Crafty.defineScene("game", (function(_this) {
        return function(attr) {
          Crafty.background('#fff2c8');
          return _this.level = new BL.Level(attr.game, attr.level, BL.levels[attr.level]);
        };
      })(this));
      this.levelNo = 1;
      this.lives = 3;
      this.score = 0;
      return this.switchToScene("game", {
        level: this.levelNo
      });
    };

    AvitoGame.prototype.switchToScene = function(sceneName, attr) {
      this.currentScene = sceneName;
      attr.game = this;
      return Crafty.enterScene(this.currentScene, attr);
    };

    AvitoGame.prototype.nextLevel = function() {
      if (this.levelNo < BL.levelsCount) {
        this.levelNo += 1;
        return setTimeout((function(_this) {
          return function() {
            return Crafty.enterScene('game', {
              game: _this,
              level: _this.levelNo
            });
          };
        })(this), 1000);
      } else {
        Crafty.log('THE END');
        this.level.statusIndicator.text('Игра окончена');
        return setTimeout((function(_this) {
          return function() {
            return _this.reset();
          };
        })(this), 5000);
      }
    };

    AvitoGame.prototype.onCargoDelivered = function() {
      this.score += 1;
      BL.log('score', this.score);
      return true;
    };

    AvitoGame.prototype.onCargoLost = function() {
      this.lives -= 1;
      BL.log('lives', this.lives);
      if (this.lives <= 0) {
        BL.log('GAME OVER');
        this.level.statusIndicator.text('GAME OVER');
        Crafty('Truck').each(function(i) {
          return this.destroyTruck(true);
        });
        setTimeout((function(_this) {
          return function() {
            return _this.reset();
          };
        })(this), 5000);
        return false;
      } else {
        return true;
      }
    };

    return AvitoGame;

  })();

  BL.game = new BL.AvitoGame();

}).call(this);
